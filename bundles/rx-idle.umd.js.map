{"version":3,"file":"rx-idle.umd.js.map","sources":["ng://rx-idle/lib/rx-idle.config.ts","ng://rx-idle/lib/rx-idle.service.ts","ng://rx-idle/lib/rx-idle.module.ts"],"sourcesContent":["export class RxIdleConfig {\r\n    /**\r\n     * Idle value in seconds.\r\n     */\r\n    idle: number;\r\n    /**\r\n     * Timeout value in seconds.\r\n     */\r\n    timeout: number;\r\n    /**\r\n     * Ping value in seconds.\r\n     */\r\n    ping: number;\r\n}","import { Injectable, Optional, NgZone } from '@angular/core';\nimport { RxIdleConfig } from './rx-idle.config';\n\nimport {\n  Observable,\n  Subject,\n  Subscription,\n  merge,\n  fromEvent,\n  from,\n  interval,\n  timer,\n  of\n} from 'rxjs';\nimport {\n  bufferTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\n\nenum MINUTES {\n  TWO = 120,\n  FIVE = 300,\n  TEN = 600\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxIdleService {\n\n  private ping$: Observable<any>;\n  private activityEvents$: Observable<any>;\n  private idle$: Observable<any>;\n  private timer$: Observable<any>;\n\n  private timerStart$ = new Subject<boolean>();\n  private timeout$ = new Subject<boolean>();\n\n  private idleSubscription: Subscription;\n\n  private idle = MINUTES.TEN;\n  private timeout = MINUTES.FIVE;\n  private ping = MINUTES.TWO;\n\n  private isInactivityTimer: boolean;\n  private isIdleDetected: boolean;\n  private isTimeout: boolean;\n\n  constructor(@Optional() config: RxIdleConfig, private _ngZone: NgZone) {\n    if (config) {\n      this.idle = config.idle;\n      this.timeout = config.timeout;\n      this.ping = config.ping;\n    }\n  }\n\n  /**\n   * Start watching for user idle and setup timer and ping.\n   */\n  startWatching() {\n    this.activityEvents$ = merge(\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n      fromEvent(document, 'keydown')\n    );\n\n    this.idle$ = from(this.activityEvents$);\n\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n\n    this.idleSubscription = this.idle$\n      .pipe(\n        bufferTime(500), // Starting point of detecting of user's inactivity\n        filter(\n          arr => !arr.length && !this.isIdleDetected && !this.isInactivityTimer\n        ),\n        tap(() => (this.isIdleDetected = true)),\n        switchMap(() =>\n          this._ngZone.runOutsideAngular(() =>\n            interval(1000).pipe(\n              takeUntil(\n                merge(\n                  this.activityEvents$,\n                  timer(this.idle * 1000).pipe(\n                    tap(() => {\n                      this.isInactivityTimer = true;\n                      this.timerStart$.next(true);\n                    })\n                  )\n                )\n              ),\n              finalize(() => (this.isIdleDetected = false))\n            )\n          )\n        )\n      )\n      .subscribe();\n\n    this.setupTimer(this.timeout);\n    this.setPing(this.ping);\n  }\n\n  /**\n   * Stop watching idle\n   */\n  stopWatching() {\n    this.stopTimer();\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Stop timer\n   */\n  stopTimer() {\n    this.isInactivityTimer = false;\n    this.timerStart$.next(false);\n  }\n\n  /**\n   * Reset timer\n   */\n  resetTimer() {\n    this.stopTimer();\n    this.isTimeout = false;\n  }\n\n  /**\n   * Return observable for timer's countdown number that emits after idle.\n   */\n  onTimerStart(): Observable<number> {\n    return this.timerStart$.pipe(\n      distinctUntilChanged(),\n      switchMap(start => (start ? this.timer$ : of(null)))\n    );\n  }\n\n  /**\n   * Return observable for timeout is fired.\n   */\n  onTimeout(): Observable<boolean> {\n    return this.timeout$.pipe(\n      filter(timeout => !!timeout),\n      tap(() => (this.isTimeout = true)),\n      map(() => true)\n    );\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfigValue(): RxIdleConfig {\n    return {\n      idle: this.idle,\n      timeout: this.timeout,\n      ping: this.ping\n    };\n  }\n\n  /**\n   * Set config values.\n   * @param config\n   */\n  setConfigValues(config: RxIdleConfig) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set config values');\n      return;\n    }\n\n    if (config.idle) {\n      this.idle = config.idle;\n    }\n    if (config.ping) {\n      this.ping = config.ping;\n    }\n    if (config.timeout) {\n      this.timeout = config.timeout;\n    }\n  }\n\n  /**\n   * Set custom activity events\n   *\n   * @param customEvents Example: merge(\n   *   fromEvent(window, 'mousemove'),\n   *   fromEvent(window, 'resize'),\n   *   fromEvent(document, 'keydown'),\n   *   fromEvent(document, 'touchstart'),\n   *   fromEvent(document, 'touchend')\n   * )\n   */\n  setCustomActivityEvents(customEvents: Observable<any>) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set custom activity events');\n      return;\n    }\n\n    this.activityEvents$ = customEvents;\n  }\n\n  /**\n   * Setup timer.\n   *\n   * Counts every seconds and return n+1 and fire timeout for last count.\n   * @param timeout Timeout in seconds.\n   */\n  private setupTimer(timeout: number) {\n    this._ngZone.runOutsideAngular(() => {\n      this.timer$ = interval(1000).pipe(\n        take(timeout),\n        map(() => 1),\n        scan((acc, n) => acc + n),\n        tap(count => {\n          if (count === timeout) {\n            this.timeout$.next(true);\n          }\n        })\n      );\n    });\n  }\n\n  /**\n   * Setup ping.\n   *\n   * Pings every ping-seconds only if is not timeout.\n   * @param ping\n   */\n  private setPing(ping: number) {\n    this.ping$ = interval(ping * 1000).pipe(filter(() => !this.isTimeout));\n  }\n\n  getPing(){\n    return this.ping$;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { RxIdleConfig } from './rx-idle.config';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class RxIdleModule { \n  static forRoot(config: RxIdleConfig): ModuleWithProviders {\n    return {\n      ngModule: RxIdleModule,\n      providers: [\n        {provide: RxIdleConfig, useValue: config}\n      ]\n    };\n  }\n}\n"],"names":["Subject","merge","fromEvent","from","bufferTime","filter","tap","switchMap","interval","takeUntil","timer","finalize","distinctUntilChanged","of","map","take","scan","Injectable","Optional","NgZone","NgModule"],"mappings":"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"}
