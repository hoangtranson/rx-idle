{"version":3,"sources":["ng://rx-idle/lib/rx-idle.config.ts","ng://rx-idle/lib/rx-idle.service.ts","ng://rx-idle/lib/rx-idle.module.ts"],"names":["RxIdleConfig","TWO","FIVE","TEN","RxIdleService","prototype","startWatching","_this","this","activityEvents$","merge","fromEvent","window","document","idle$","from","idleSubscription","unsubscribe","pipe","bufferTime","filter","arr","length","isIdleDetected","isInactivityTimer","tap","switchMap","_ngZone","runOutsideAngular","interval","takeUntil","timer","idle","timerStart$","next","finalize","subscribe","setupTimer","timeout","setPing","ping","stopWatching","stopTimer","resetTimer","isTimeout","onTimerStart","distinctUntilChanged","start","timer$","of","onTimeout","timeout$","map","getConfigValue","setConfigValues","config","closed","console","error","setCustomActivityEvents","customEvents","take","scan","acc","n","count","ping$","getPing","Injectable","args","providedIn","decorators","type","Optional","NgZone","Subject","MINUTES","RxIdleModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["export class RxIdleConfig {\r\n    /**\r\n     * Idle value in seconds.\r\n     */\r\n    idle: number;\r\n    /**\r\n     * Timeout value in seconds.\r\n     */\r\n    timeout: number;\r\n    /**\r\n     * Ping value in seconds.\r\n     */\r\n    ping: number;\r\n}","import { Injectable, Optional, NgZone } from '@angular/core';\nimport { RxIdleConfig } from './rx-idle.config';\n\nimport {\n  Observable,\n  Subject,\n  Subscription,\n  merge,\n  fromEvent,\n  from,\n  interval,\n  timer,\n  of\n} from 'rxjs';\nimport {\n  bufferTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\n\nenum MINUTES {\n  TWO = 120,\n  FIVE = 300,\n  TEN = 600\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxIdleService {\n\n  private ping$: Observable<any>;\n  private activityEvents$: Observable<any>;\n  private idle$: Observable<any>;\n  private timer$: Observable<any>;\n\n  private timerStart$ = new Subject<boolean>();\n  private timeout$ = new Subject<boolean>();\n\n  private idleSubscription: Subscription;\n\n  private idle = MINUTES.TEN;\n  private timeout = MINUTES.FIVE;\n  private ping = MINUTES.TWO;\n\n  private isInactivityTimer: boolean;\n  private isIdleDetected: boolean;\n  private isTimeout: boolean;\n\n  constructor(@Optional() config: RxIdleConfig, private _ngZone: NgZone) {\n    if (config) {\n      this.idle = config.idle;\n      this.timeout = config.timeout;\n      this.ping = config.ping;\n    }\n  }\n\n  /**\n   * Start watching for user idle and setup timer and ping.\n   */\n  startWatching() {\n    this.activityEvents$ = merge(\n      fromEvent(window, 'mousemove'),\n      fromEvent(window, 'resize'),\n      fromEvent(document, 'keydown')\n    );\n\n    this.idle$ = from(this.activityEvents$);\n\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n\n    this.idleSubscription = this.idle$\n      .pipe(\n        bufferTime(500), // Starting point of detecting of user's inactivity\n        filter(\n          arr => !arr.length && !this.isIdleDetected && !this.isInactivityTimer\n        ),\n        tap(() => (this.isIdleDetected = true)),\n        switchMap(() =>\n          this._ngZone.runOutsideAngular(() =>\n            interval(1000).pipe(\n              takeUntil(\n                merge(\n                  this.activityEvents$,\n                  timer(this.idle * 1000).pipe(\n                    tap(() => {\n                      this.isInactivityTimer = true;\n                      this.timerStart$.next(true);\n                    })\n                  )\n                )\n              ),\n              finalize(() => (this.isIdleDetected = false))\n            )\n          )\n        )\n      )\n      .subscribe();\n\n    this.setupTimer(this.timeout);\n    this.setPing(this.ping);\n  }\n\n  /**\n   * Stop watching idle\n   */\n  stopWatching() {\n    this.stopTimer();\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Stop timer\n   */\n  stopTimer() {\n    this.isInactivityTimer = false;\n    this.timerStart$.next(false);\n  }\n\n  /**\n   * Reset timer\n   */\n  resetTimer() {\n    this.stopTimer();\n    this.isTimeout = false;\n  }\n\n  /**\n   * Return observable for timer's countdown number that emits after idle.\n   */\n  onTimerStart(): Observable<number> {\n    return this.timerStart$.pipe(\n      distinctUntilChanged(),\n      switchMap(start => (start ? this.timer$ : of(null)))\n    );\n  }\n\n  /**\n   * Return observable for timeout is fired.\n   */\n  onTimeout(): Observable<boolean> {\n    return this.timeout$.pipe(\n      filter(timeout => !!timeout),\n      tap(() => (this.isTimeout = true)),\n      map(() => true)\n    );\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfigValue(): RxIdleConfig {\n    return {\n      idle: this.idle,\n      timeout: this.timeout,\n      ping: this.ping\n    };\n  }\n\n  /**\n   * Set config values.\n   * @param config\n   */\n  setConfigValues(config: RxIdleConfig) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set config values');\n      return;\n    }\n\n    if (config.idle) {\n      this.idle = config.idle;\n    }\n    if (config.ping) {\n      this.ping = config.ping;\n    }\n    if (config.timeout) {\n      this.timeout = config.timeout;\n    }\n  }\n\n  /**\n   * Set custom activity events\n   *\n   * @param customEvents Example: merge(\n   *   fromEvent(window, 'mousemove'),\n   *   fromEvent(window, 'resize'),\n   *   fromEvent(document, 'keydown'),\n   *   fromEvent(document, 'touchstart'),\n   *   fromEvent(document, 'touchend')\n   * )\n   */\n  setCustomActivityEvents(customEvents: Observable<any>) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set custom activity events');\n      return;\n    }\n\n    this.activityEvents$ = customEvents;\n  }\n\n  /**\n   * Setup timer.\n   *\n   * Counts every seconds and return n+1 and fire timeout for last count.\n   * @param timeout Timeout in seconds.\n   */\n  private setupTimer(timeout: number) {\n    this._ngZone.runOutsideAngular(() => {\n      this.timer$ = interval(1000).pipe(\n        take(timeout),\n        map(() => 1),\n        scan((acc, n) => acc + n),\n        tap(count => {\n          if (count === timeout) {\n            this.timeout$.next(true);\n          }\n        })\n      );\n    });\n  }\n\n  /**\n   * Setup ping.\n   *\n   * Pings every ping-seconds only if is not timeout.\n   * @param ping\n   */\n  private setPing(ping: number) {\n    this.ping$ = interval(ping * 1000).pipe(filter(() => !this.isTimeout));\n  }\n\n  getPing(){\n    return this.ping$;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { RxIdleConfig } from './rx-idle.config';\n\n@NgModule({\n  declarations: [],\n  imports: [\n  ],\n  exports: []\n})\nexport class RxIdleModule { \n  static forRoot(config: RxIdleConfig): ModuleWithProviders {\n    return {\n      ngModule: RxIdleModule,\n      providers: [\n        {provide: RxIdleConfig, useValue: config}\n      ]\n    };\n  }\n}\n"]}